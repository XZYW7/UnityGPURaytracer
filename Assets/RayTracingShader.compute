#pragma kernel CSMain
RWTexture2D<float4> Result : register(u0);
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float4 _DirectionalLight;
Texture2D<float4> _SkyTex;
SamplerState sampler_SkyTex;
float2 _PixelOffset;
float4 _Time;

struct Material
{
    float3 albedo;
    float metallic;
    float roughness;
    float3 emission;
};
struct sphere{
    float3 center;
    float radius;
    Material mat;
};
StructuredBuffer<sphere> _Spheres;
struct MeshObject
{
    float4x4 localToWorldMatrix;
    int indices_offset;
    int indices_count;
    Material mat;
};
StructuredBuffer<MeshObject> _MeshObjects;
StructuredBuffer<float3> _Vertices;
StructuredBuffer<int> _Indices;

static const float PI = 3.14159265f;
struct Ray
{
    float3 o;
    float3 dir;
    float3 energy;
};
Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.o = origin;
    ray.dir = direction;
    return ray;
}
//CreateCameraRayFunction
Ray CreateCameraRay(float2 uv)
{
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction,0.0)).xyz;
    direction = normalize(direction);
    Ray r;
    r.o = origin;
    r.dir = direction;
    r.energy = float3(1.0f, 1.0f, 1.0f);
    return r;
}

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    Material mat;
};
RayHit CreateRayHit()
{
    RayHit hit;
    //hit point initialization
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    //material initialization
    hit.mat.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.mat.metallic = 0.0f;
    hit.mat.roughness = 0.0f;
    hit.mat.emission = float3(0.0f, 0.0f, 0.0f);
    return hit;
}
static const float EPSILON = 1e-8;
bool IntersectTriangle_MT97(Ray ray, float3 vert0, float3 vert1, float3 vert2,
    inout float t, inout float u, inout float v)
{
    // find vectors for two edges sharing vert0
    float3 edge1 = vert1 - vert0;
    float3 edge2 = vert2 - vert0;
    // begin calculating determinant - also used to calculate U parameter
    float3 pvec = cross(ray.dir, edge2);
    // if determinant is near zero, ray lies in plane of triangle
    float det = dot(edge1, pvec);
    // use backface culling
    if (det < EPSILON)
        return false;
    float inv_det = 1.0f / det;
    // calculate distance from vert0 to ray origin
    float3 tvec = ray.o - vert0;
    // calculate U parameter and test bounds
    u = dot(tvec, pvec) * inv_det;
    if (u < 0.0 || u > 1.0f)
        return false;
    // prepare to test V parameter
    float3 qvec = cross(tvec, edge1);
    // calculate V parameter and test bounds
    v = dot(ray.dir, qvec) * inv_det;
    if (v < 0.0 || u + v > 1.0f)
        return false;
    // calculate t, ray intersects triangle
    t = dot(edge2, qvec) * inv_det;
    return true;
}
void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.o.y / ray.dir.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.o+ t * ray.dir;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.mat.albedo = float3(1.0f, 1.0f, 1.0f);
        bestHit.mat.metallic = 0.0f;
        bestHit.mat.roughness = 1.0f;
    }
}
void IntersectSphere(Ray ray, inout RayHit bestHit,sphere s)
{
    float3 oc = ray.o - s.center;
    float a = dot(ray.dir, ray.dir);
    float b = 2.0f * dot(oc, ray.dir);
    float c = dot(oc, oc) - s.radius * s.radius;
    float d = b * b - 4.0f * a * c;
    if (d > 0.0f)
    {
        float t = (-b - sqrt(d)) / (2.0f * a);
        if (t > 0.0f && t < bestHit.distance)
        {
            bestHit.distance = t;
            bestHit.position = ray.o + t * ray.dir;
            bestHit.normal = normalize(bestHit.position - s.center);
            bestHit.mat = s.mat;
        }
    }
}
void IntersectMeshObject(Ray ray, inout RayHit bestHit, MeshObject meshObject)
{
    uint offset = meshObject.indices_offset;
    uint count = offset + meshObject.indices_count;
    for (uint i = offset; i < count; i += 3)
    {
        float3 v0 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i]], 1))).xyz;
        float3 v1 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 1]], 1))).xyz;
        float3 v2 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 2]], 1))).xyz;
        float t, u, v;
        if (IntersectTriangle_MT97(ray, v0, v1, v2, t, u, v))
        {
            if (t > 0 && t < bestHit.distance)
            {
                bestHit.distance = t;
                bestHit.position = ray.o + t * ray.dir;
                bestHit.normal = normalize(cross(v1 - v0, v2 - v0));
                if(dot(bestHit.normal,ray.dir)>0.0f)bestHit.normal = -bestHit.normal;
                bestHit.mat = meshObject.mat;
            }
        }
    }
}
RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlane(ray, bestHit);

    uint numSpheres, stride;
    _Spheres.GetDimensions(numSpheres, stride);
    for(uint i=0;i<numSpheres;i++){
        IntersectSphere(ray, bestHit, _Spheres[i]);
    }
    //// Trace single triangle
    // Trace mesh objects
    uint count;
    _MeshObjects.GetDimensions(count, stride);
    for (i = 0; i < count; i++)
    {
        IntersectMeshObject(ray, bestHit, _MeshObjects[i]);
    }
    return bestHit;
}
float sdot(float3 x, float3 y, float f = 1.0f)
{
    return saturate(dot(x, y) * f);
}

float2 _Pixel;
float _Seed;
float rand()
{
    //float _Seed =  frac(_Time.x);
    float result = frac(sin(_Seed / 100.0f * dot(_Pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    _Seed += 1.0f;
    return result;
}
float3x3 GetTangentSpace(float3 normal)
{
    // Choose a helper vector for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);
    // Generate vectors
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}
float3 SampleHemisphere(float3 normal)
{
    // Uniformly sample hemisphere direction
    float cosTheta = rand();
    float sinTheta = sqrt(max(0.0f, 1.0f - cosTheta * cosTheta));
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
    // Transform direction to world space
    return mul(tangentSpaceDir,GetTangentSpace(normal));
}
float3 SampleHemisphere_ISGGX(float3 normal, float roughness)
{
    // Sample the hemisphere, where alpha determines the kind of the sampling
    float xi1 = rand();
    float a = roughness * roughness;
    float cosTheta = sqrt((1.0 - xi1) / (1.0 + (a*a - 1.0) * xi1));
    float sinTheta = sqrt(max(0.0f, 1.0f - cosTheta * cosTheta));
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
    // Transform direction to world space
    return mul(tangentSpaceDir, GetTangentSpace(normal));
}
float3 fresnelSchlick(float cosTheta, float3 F0)
{
    return F0 + (1.0- F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}  

float DistributionGGX(float3 N, float3 H, float roughness)
{
    float a      = roughness*roughness;
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return num / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float a = roughness;
    float k = (a * a) / 2.0f;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return num / denom;
}
float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}
float3 Shade(inout Ray ray, RayHit hit)//inout for update ray
{
    if (hit.distance < 1.#INF)
    {
        ray.o = hit.position + hit.normal * 0.001f;
        float3 N = hit.normal;
        float3 V = -ray.dir;//L_o        
        float roughness = hit.mat.roughness;
        float3 H = SampleHemisphere_ISGGX(N, roughness);
        float VoH = sdot(V, H);
        ray.dir = normalize(H * 2.0f * dot(V, H) - V);
        float3 L = ray.dir;
        
        float NoV = sdot(N, V);
        float NoL = sdot(N, L);
        float NoH = sdot(N, H);

       
        float3 F0 = float3(0.04,0.04,0.04);
        F0 = lerp(F0, hit.mat.albedo,hit.mat.metallic); 
        float3 F  = fresnelSchlick(VoH, F0);
        float G = GeometrySmith(N, V, L, roughness); 
        float3 ks = F;
        float3 kd = (1.0f - ks) * (1.0f - hit.mat.metallic);
        float3 brdf = F * (VoH * G)/(NoV * NoH) *ks+ kd*hit.mat.albedo *NoL;
        //
        ray.energy *= brdf;

        return hit.mat.emission;;//

    }
    else
    {
        ray.energy = 0.0f;
        // Sample the skybox and write it
        float theta = acos(ray.dir.y) / -PI;
        float phi = atan2(ray.dir.x, -ray.dir.z) / -PI * 0.5f;
        return _SkyTex.SampleLevel(sampler_SkyTex, float2(phi, theta), 0).xyz;
    }
}




[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DISPATCHTHREADID)
{
    _Pixel = id.xy;
    uint width, height;
    Result.GetDimensions(width, height);
    float2 uv = float2((id.xy+_PixelOffset) / float2(width, height) * 2.0f - 1.0f);

    Ray r = CreateCameraRay(uv);
    float3 result = float3(0.0,0.0,0.0);
    //float random = rand();
    for(int i=0;i<8;i++){
        RayHit hit = Trace(r);
        float3 transport = r.energy;
        float3 c = Shade(r, hit);//brdf
        result += transport* c;
        if(abs(_PixelOffset.x-0.5)<0.00001){
            //break;
        }
        if(!any(r.energy))break;
    }
    result *= _DirectionalLight.w;
    Result[id.xy] = float4(result, 1.0f);

}
